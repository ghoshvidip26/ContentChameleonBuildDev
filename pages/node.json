
{"nodes":[{"_groupInfo":{"name":"OpenAI","description":"OpenAI Models","category":"AI Models","id":"ZBwcODUEhzNMxYxpN1O8","keyDescription":"Add your OpenAI API Key. Get it from your [OpenAI account](https://platform.openai.com/account/api-keys)","acceptsKey":true,"longDescription":"BuildShip allows you to effortlessly integrate OpenAI models into your workflows, enabling the use of advanced machine learning capabilities for text generation, translation, and more. Streamline processes by utilizing AI-powered models to enhance automation, decision-making, and content generation in a seamless and efficient manner.","uid":"openai","details":null,"icon":null,"iconUrl":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"},"id":"6729bd7b-b77f-4303-b0d7-352f640e1860","_libRef":{"src":"https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodesV2/@buildship/openai-extract/5.0.1/build.cjs","integrity":"v3:a427c1468f70a1c365e5a7de89e79e97","libType":"public","libNodeRefId":"@buildship/openai-extract","buildHash":"e6ba521dfabd5053bad590536e8c02ad99b49ee9e7c741b3d36cc088f9164e81","isDirty":false,"version":"5.0.1"},"label":"LLM Extract URL","buildshipKey":true,"type":"script"},{"inputs":{"type":"object","properties":{"condition_1":{"buildship":{"index":1},"type":"boolean","title":"Condition 1"},"condition_696a2b0c_ea8e_4ef2_91dd_3a9894d0eaee":{"buildship":{"index":3},"type":"boolean","title":"Condition 3"},"executionType":{"type":"string","buildship":{"index":0,"options":[{"value":"first_match","label":"First Match"},{"label":"All That Match","value":"all_that_match"}]},"default":"first_match","title":"Execution Type","description":"If several conditions are met, choose whether you want to execute only the first matching case or all the matching cases.","enum":["first_match","all_that_match"]},"condition_aebf6043_d203_4c36_b580_a2c781d40f1c":{"title":"Condition 2","type":"boolean","buildship":{"index":2}}},"required":["executionType"]},"label":"Switch","conditionOrder":["condition_1","condition_aebf6043_d203_4c36_b580_a2c781d40f1c","condition_696a2b0c_ea8e_4ef2_91dd_3a9894d0eaee"],"description":"The Switch node evaluates an input against multiple cases and executes the corresponding flow for the matching case(s). \n\nLearn more about the Switch node: [Docs](https://docs.buildship.com/core-nodes/switch)","conditionSequences":{"condition_fallback":[],"condition_1":[{"dependencies":{"path":"0.12.7","fs":"0.0.2","openai":"4.24.7"},"inputs":{"sections":{"section_a1671ee7_0f0a_4eac_9307_4337093fff82":{"title":"Advanced Settings","buildship":{"collapseByDefault":true,"index":2},"type":"section"}},"type":"object","properties":{"systemPrompt":{"type":"string","description":"The system prompt that establishes context, rules, and guidelines for how the AI model should respond to the user's input.","properties":{},"title":"Instructions","default":"","buildship":{"placeholder":"System default","defaultExpressionType":"text","index":0,"sensitive":false}},"temperature":{"default":0.5,"properties":{},"description":"The temperature for the output","buildship":{"index":2.3,"sensitive":false,"defaultExpressionType":"text"},"title":"Temperature","type":"number"},"userRequest":{"buildship":{"defaultExpressionType":"text","sensitive":false,"index":1},"title":"Prompt","description":"The user's specific request or query that the AI model will process according to the provided instructions.","properties":{},"default":"Tell me a joke","type":"string"},"model":{"type":"string","enum":["gpt-4.1","gpt-4.1-mini","gpt-4.1-nano","gpt-4.5-preview","gpt-4o-mini","gpt-4o","gpt-4-1106-preview","gpt-4","gpt-3.5-turbo"],"pattern":"","default":"gpt-4.1-mini","description":"The OpenAI model to use","title":"Model","properties":{},"buildship":{"optionsScript":"const getAccessToken = async () => {\n  const response = await fetch(\n    \"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n    {\n      headers: { \"Metadata-Flavor\": \"Google\" },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`Failed to obtain access token: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n};\nconst apiKey= await getAccessToken()\nconst response = await fetch('https://proxy.buildship.run/llm/openai/v1/models', {\n  method: 'GET',\n  headers: {\n    'Authorization': `Bearer ${apiKey}`\n  }\n});\n\nif (!response.ok) {\n  throw new Error('Failed to fetch models');\n}\n\nconst data = await response.json();\n\nconst models = data.data.map(model => ({\n  value: model.id,\n  label: model.id\n}));\n\nreturn models;","defaultExpressionType":"text","sensitive":false,"index":2.2,"enableScriptOptions":false,"options":[{"value":"gpt-4.1","label":"gpt-4.1"},{"value":"gpt-4.1-mini","label":"gpt-4.1-mini"},{"label":"gpt-4.1-nano","value":"gpt-4.1-nano"},{"label":"gpt-4.5-preview","value":"gpt-4.5-preview"},{"label":"gpt-4o-mini","value":"gpt-4o-mini"},{"value":"gpt-4o","label":"gpt-4o"},{"value":"gpt-4-1106-preview","label":"gpt-4-turbo"},{"label":"gpt-4","value":"gpt-4"},{"label":"gpt-3.5-turbo","value":"gpt-3.5-turbo"}]}},"maxTokens":{"type":"number","description":"The maximum number of tokens to generate in the response","properties":{},"default":800,"title":"Max Tokens","buildship":{"defaultExpressionType":"text","sensitive":false,"index":2.4}}},"required":["openaiSecret","streamContentForm","stream","userRequest","model"],"structure":[{"index":0,"id":"systemPrompt","depth":0,"parentId":null},{"id":"userRequest","parentId":null,"depth":0,"index":1},{"parentId":null,"depth":0,"index":2,"children":[{"parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","index":0,"depth":1,"id":"model"},{"parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","id":"temperature","depth":1,"index":2},{"index":3,"id":"maxTokens","parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","depth":1}],"id":"section_a1671ee7_0f0a_4eac_9307_4337093fff82"}]},"output":{"description":"The AI's response","title":"Response","type":"string","buildship":{"index":0}},"integrations":[],"buildshipKey":true,"_libRef":{"buildHash":"cfa2c7912196e91e134ea67a74560ba14453ea08e52a5d03d0fe2c4f9327d4df","libNodeRefId":"@buildship/keyless-openai-text-generator","src":"https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodesV2/@buildship/keyless-openai-text-generator/1.0.13/build.cjs","version":"1.0.13","isDirty":false,"libType":"public","integrity":"v3:77ef7f4600ec6728ac40cc1154bcfc95"},"label":"OpenAI Text Generator","script":"import OpenAI from \"openai\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst getAccessToken = async () => {\n  const response = await fetch(\n    \"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n    {\n      headers: { \"Metadata-Flavor\": \"Google\" },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`Failed to obtain access token: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n};\n\nexport default async (\n  {\n    userRequest,\n    systemPrompt = \"\",\n    model,\n    temperature,\n    maxTokens,\n    kbIntegrationKey\n  },\n  { auth, logging, workflow, node },\n) => {\n  const openai = kbIntegrationKey?.split(\";;\")[1] === \"credits\"\n      ? new OpenAI({\n          baseURL: \"https://proxy.buildship.run/llm/openai\",\n          apiKey: await getAccessToken(),\n        })\n      : new OpenAI({\n          apiKey: auth.getKey(),\n        });\n\n\n  try {\n    const jsonInstruction = \"##Output a valid JSON Object##.\\n\";\n\n    const response = await openai.chat.completions.create({\n      model,\n      temperature,\n      max_tokens: maxTokens,\n      messages: [\n        { \n          role: \"system\", \n          content: systemPrompt \n        },\n        { role: \"user\", content: userRequest }\n      ],\n\n    },\n    {\n      ...(kbIntegrationKey?.split(\";;\")[1] === \"credits\"\n        ? {\n            headers: {\n              \"x-buildship-workflow-id\": workflow?.id,\n              \"x-buildship-node-id\": node?.id,\n            },\n          }\n        : {}),\n    },);\n\n    const output = response.choices[0].message?.content;\n\n    \n    return output;\n  } catch (error) {\n    logging.log(error);\n    throw error;\n  }\n};\n","type":"script","_groupInfo":{"acceptsKey":true,"name":"OpenAI","icon":null,"description":"OpenAI Models","iconUrl":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3","id":"ZBwcODUEhzNMxYxpN1O8","category":"AI Models","details":null,"longDescription":"BuildShip allows you to effortlessly integrate OpenAI models into your workflows, enabling the use of advanced machine learning capabilities for text generation, translation, and more. Streamline processes by utilizing AI-powered models to enhance automation, decision-making, and content generation in a seamless and efficient manner.","uid":"openai","keyDescription":"Add your OpenAI API Key. Get it from your [OpenAI account](https://platform.openai.com/account/api-keys)"},"id":"97f8173b-0c57-4e6c-92a4-75a626721231","meta":{"icon":{"url":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3&_gl=1*b90bgk*_ga*MjAxOTYxMjk5OS4xNjk0NTIzMjQ2*_ga_CW55HF8NVT*MTY5NjQwMzEyMy4yNS4xLjE2OTY0MDMxNDQuMzkuMC4w","type":"URL"},"description":"A keyless node that sends instructions and a prompt to an OpenAI LLM model (such as GPT-4.1 or GPT-4o) via the responses API and returns the generated text.","id":"keyless-openai-text-generator","name":"OpenAI Text Generator"}}],"condition_696a2b0c_ea8e_4ef2_91dd_3a9894d0eaee":[{"id":"9d7cc712-adba-4e62-8c83-291fe48846c9","buildshipKey":true,"_libRef":{"isDirty":false,"src":"https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodesV2/@buildship/keyless-openai-text-generator/1.0.13/build.cjs","version":"1.0.13","libType":"public","integrity":"v3:77ef7f4600ec6728ac40cc1154bcfc95","libNodeRefId":"@buildship/keyless-openai-text-generator","buildHash":"cfa2c7912196e91e134ea67a74560ba14453ea08e52a5d03d0fe2c4f9327d4df"},"inputs":{"sections":{"section_a1671ee7_0f0a_4eac_9307_4337093fff82":{"buildship":{"index":2,"collapseByDefault":true},"type":"section","title":"Advanced Settings"}},"type":"object","required":["openaiSecret","streamContentForm","stream","userRequest","model"],"properties":{"systemPrompt":{"title":"Instructions","buildship":{"placeholder":"System default","sensitive":false,"defaultExpressionType":"text","index":0},"properties":{},"type":"string","description":"The system prompt that establishes context, rules, and guidelines for how the AI model should respond to the user's input.","default":""},"model":{"default":"gpt-4.1-mini","enum":["gpt-4.1","gpt-4.1-mini","gpt-4.1-nano","gpt-4.5-preview","gpt-4o-mini","gpt-4o","gpt-4-1106-preview","gpt-4","gpt-3.5-turbo"],"buildship":{"options":[{"label":"gpt-4.1","value":"gpt-4.1"},{"value":"gpt-4.1-mini","label":"gpt-4.1-mini"},{"label":"gpt-4.1-nano","value":"gpt-4.1-nano"},{"label":"gpt-4.5-preview","value":"gpt-4.5-preview"},{"value":"gpt-4o-mini","label":"gpt-4o-mini"},{"value":"gpt-4o","label":"gpt-4o"},{"label":"gpt-4-turbo","value":"gpt-4-1106-preview"},{"label":"gpt-4","value":"gpt-4"},{"label":"gpt-3.5-turbo","value":"gpt-3.5-turbo"}],"defaultExpressionType":"text","enableScriptOptions":false,"index":2.2,"optionsScript":"const getAccessToken = async () => {\n  const response = await fetch(\n    \"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n    {\n      headers: { \"Metadata-Flavor\": \"Google\" },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`Failed to obtain access token: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n};\nconst apiKey= await getAccessToken()\nconst response = await fetch('https://proxy.buildship.run/llm/openai/v1/models', {\n  method: 'GET',\n  headers: {\n    'Authorization': `Bearer ${apiKey}`\n  }\n});\n\nif (!response.ok) {\n  throw new Error('Failed to fetch models');\n}\n\nconst data = await response.json();\n\nconst models = data.data.map(model => ({\n  value: model.id,\n  label: model.id\n}));\n\nreturn models;","sensitive":false},"description":"The OpenAI model to use","properties":{},"type":"string","pattern":"","title":"Model"},"temperature":{"buildship":{"index":2.3,"sensitive":false,"defaultExpressionType":"text"},"description":"The temperature for the output","default":0.5,"type":"number","title":"Temperature","properties":{}},"userRequest":{"buildship":{"index":1,"sensitive":false,"defaultExpressionType":"text"},"properties":{},"description":"The user's specific request or query that the AI model will process according to the provided instructions.","title":"Prompt","default":"Tell me a joke","type":"string"},"maxTokens":{"properties":{},"description":"The maximum number of tokens to generate in the response","title":"Max Tokens","type":"number","buildship":{"sensitive":false,"index":2.4,"defaultExpressionType":"text"},"default":800}},"structure":[{"depth":0,"id":"systemPrompt","index":0,"parentId":null},{"parentId":null,"id":"userRequest","index":1,"depth":0},{"children":[{"depth":1,"parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","index":0,"id":"model"},{"id":"temperature","depth":1,"parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","index":2},{"parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","index":3,"id":"maxTokens","depth":1}],"depth":0,"id":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","index":2,"parentId":null}]},"output":{"description":"The AI's response","title":"Response","type":"string","buildship":{"index":0}},"meta":{"icon":{"url":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3&_gl=1*b90bgk*_ga*MjAxOTYxMjk5OS4xNjk0NTIzMjQ2*_ga_CW55HF8NVT*MTY5NjQwMzEyMy4yNS4xLjE2OTY0MDMxNDQuMzkuMC4w","type":"URL"},"name":"OpenAI Text Generator","description":"A keyless node that sends instructions and a prompt to an OpenAI LLM model (such as GPT-4.1 or GPT-4o) via the responses API and returns the generated text.","id":"keyless-openai-text-generator"},"type":"script","integrations":[],"label":"OpenAI Text Generator","_groupInfo":{"id":"ZBwcODUEhzNMxYxpN1O8","acceptsKey":true,"icon":null,"category":"AI Models","iconUrl":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3","uid":"openai","longDescription":"BuildShip allows you to effortlessly integrate OpenAI models into your workflows, enabling the use of advanced machine learning capabilities for text generation, translation, and more. Streamline processes by utilizing AI-powered models to enhance automation, decision-making, and content generation in a seamless and efficient manner.","details":null,"keyDescription":"Add your OpenAI API Key. Get it from your [OpenAI account](https://platform.openai.com/account/api-keys)","name":"OpenAI","description":"OpenAI Models"},"dependencies":{"openai":"4.24.7","fs":"0.0.2","path":"0.12.7"},"script":"import OpenAI from \"openai\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst getAccessToken = async () => {\n  const response = await fetch(\n    \"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n    {\n      headers: { \"Metadata-Flavor\": \"Google\" },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`Failed to obtain access token: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n};\n\nexport default async (\n  {\n    userRequest,\n    systemPrompt = \"\",\n    model,\n    temperature,\n    maxTokens,\n    kbIntegrationKey\n  },\n  { auth, logging, workflow, node },\n) => {\n  const openai = kbIntegrationKey?.split(\";;\")[1] === \"credits\"\n      ? new OpenAI({\n          baseURL: \"https://proxy.buildship.run/llm/openai\",\n          apiKey: await getAccessToken(),\n        })\n      : new OpenAI({\n          apiKey: auth.getKey(),\n        });\n\n\n  try {\n    const jsonInstruction = \"##Output a valid JSON Object##.\\n\";\n\n    const response = await openai.chat.completions.create({\n      model,\n      temperature,\n      max_tokens: maxTokens,\n      messages: [\n        { \n          role: \"system\", \n          content: systemPrompt \n        },\n        { role: \"user\", content: userRequest }\n      ],\n\n    },\n    {\n      ...(kbIntegrationKey?.split(\";;\")[1] === \"credits\"\n        ? {\n            headers: {\n              \"x-buildship-workflow-id\": workflow?.id,\n              \"x-buildship-node-id\": node?.id,\n            },\n          }\n        : {}),\n    },);\n\n    const output = response.choices[0].message?.content;\n\n    \n    return output;\n  } catch (error) {\n    logging.log(error);\n    throw error;\n  }\n};\n"}],"condition_aebf6043_d203_4c36_b580_a2c781d40f1c":[{"script":"import OpenAI from \"openai\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst getAccessToken = async () => {\n  const response = await fetch(\n    \"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n    {\n      headers: { \"Metadata-Flavor\": \"Google\" },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`Failed to obtain access token: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n};\n\nexport default async (\n  {\n    userRequest,\n    systemPrompt = \"\",\n    model,\n    temperature,\n    maxTokens,\n    kbIntegrationKey\n  },\n  { auth, logging, workflow, node },\n) => {\n  const openai = kbIntegrationKey?.split(\";;\")[1] === \"credits\"\n      ? new OpenAI({\n          baseURL: \"https://proxy.buildship.run/llm/openai\",\n          apiKey: await getAccessToken(),\n        })\n      : new OpenAI({\n          apiKey: auth.getKey(),\n        });\n\n\n  try {\n    const jsonInstruction = \"##Output a valid JSON Object##.\\n\";\n\n    const response = await openai.chat.completions.create({\n      model,\n      temperature,\n      max_tokens: maxTokens,\n      messages: [\n        { \n          role: \"system\", \n          content: systemPrompt \n        },\n        { role: \"user\", content: userRequest }\n      ],\n\n    },\n    {\n      ...(kbIntegrationKey?.split(\";;\")[1] === \"credits\"\n        ? {\n            headers: {\n              \"x-buildship-workflow-id\": workflow?.id,\n              \"x-buildship-node-id\": node?.id,\n            },\n          }\n        : {}),\n    },);\n\n    const output = response.choices[0].message?.content;\n\n    \n    return output;\n  } catch (error) {\n    logging.log(error);\n    throw error;\n  }\n};\n","_groupInfo":{"details":null,"uid":"openai","category":"AI Models","iconUrl":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3","keyDescription":"Add your OpenAI API Key. Get it from your [OpenAI account](https://platform.openai.com/account/api-keys)","id":"ZBwcODUEhzNMxYxpN1O8","description":"OpenAI Models","acceptsKey":true,"icon":null,"longDescription":"BuildShip allows you to effortlessly integrate OpenAI models into your workflows, enabling the use of advanced machine learning capabilities for text generation, translation, and more. Streamline processes by utilizing AI-powered models to enhance automation, decision-making, and content generation in a seamless and efficient manner.","name":"OpenAI"},"type":"script","output":{"type":"string","description":"The AI's response","buildship":{"index":0},"title":"Response"},"id":"e6b2878d-cb4d-448b-b40c-6e67385ca292","meta":{"icon":{"url":"https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3&_gl=1*b90bgk*_ga*MjAxOTYxMjk5OS4xNjk0NTIzMjQ2*_ga_CW55HF8NVT*MTY5NjQwMzEyMy4yNS4xLjE2OTY0MDMxNDQuMzkuMC4w","type":"URL"},"id":"keyless-openai-text-generator","description":"A keyless node that sends instructions and a prompt to an OpenAI LLM model (such as GPT-4.1 or GPT-4o) via the responses API and returns the generated text.","name":"OpenAI Text Generator"},"buildshipKey":true,"label":"OpenAI Text Generator","inputs":{"sections":{"section_a1671ee7_0f0a_4eac_9307_4337093fff82":{"buildship":{"index":2,"collapseByDefault":true},"type":"section","title":"Advanced Settings"}},"required":["openaiSecret","streamContentForm","stream","userRequest","model"],"structure":[{"parentId":null,"index":0,"depth":0,"id":"systemPrompt"},{"index":1,"depth":0,"parentId":null,"id":"userRequest"},{"children":[{"depth":1,"index":0,"id":"model","parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82"},{"depth":1,"parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","id":"temperature","index":2},{"index":3,"id":"maxTokens","parentId":"section_a1671ee7_0f0a_4eac_9307_4337093fff82","depth":1}],"depth":0,"index":2,"parentId":null,"id":"section_a1671ee7_0f0a_4eac_9307_4337093fff82"}],"properties":{"model":{"title":"Model","type":"string","description":"The OpenAI model to use","properties":{},"buildship":{"defaultExpressionType":"text","optionsScript":"const getAccessToken = async () => {\n  const response = await fetch(\n    \"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n    {\n      headers: { \"Metadata-Flavor\": \"Google\" },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`Failed to obtain access token: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n};\nconst apiKey= await getAccessToken()\nconst response = await fetch('https://proxy.buildship.run/llm/openai/v1/models', {\n  method: 'GET',\n  headers: {\n    'Authorization': `Bearer ${apiKey}`\n  }\n});\n\nif (!response.ok) {\n  throw new Error('Failed to fetch models');\n}\n\nconst data = await response.json();\n\nconst models = data.data.map(model => ({\n  value: model.id,\n  label: model.id\n}));\n\nreturn models;","options":[{"value":"gpt-4.1","label":"gpt-4.1"},{"value":"gpt-4.1-mini","label":"gpt-4.1-mini"},{"label":"gpt-4.1-nano","value":"gpt-4.1-nano"},{"value":"gpt-4.5-preview","label":"gpt-4.5-preview"},{"value":"gpt-4o-mini","label":"gpt-4o-mini"},{"value":"gpt-4o","label":"gpt-4o"},{"label":"gpt-4-turbo","value":"gpt-4-1106-preview"},{"value":"gpt-4","label":"gpt-4"},{"value":"gpt-3.5-turbo","label":"gpt-3.5-turbo"}],"enableScriptOptions":false,"sensitive":false,"index":2.2},"enum":["gpt-4.1","gpt-4.1-mini","gpt-4.1-nano","gpt-4.5-preview","gpt-4o-mini","gpt-4o","gpt-4-1106-preview","gpt-4","gpt-3.5-turbo"],"default":"gpt-4.1-mini","pattern":""},"systemPrompt":{"buildship":{"sensitive":false,"placeholder":"System default","index":0,"defaultExpressionType":"text"},"title":"Instructions","description":"The system prompt that establishes context, rules, and guidelines for how the AI model should respond to the user's input.","properties":{},"type":"string","default":""},"userRequest":{"default":"Tell me a joke","description":"The user's specific request or query that the AI model will process according to the provided instructions.","properties":{},"buildship":{"index":1,"sensitive":false,"defaultExpressionType":"text"},"title":"Prompt","type":"string"},"temperature":{"default":0.5,"properties":{},"type":"number","title":"Temperature","description":"The temperature for the output","buildship":{"index":2.3,"defaultExpressionType":"text","sensitive":false}},"maxTokens":{"description":"The maximum number of tokens to generate in the response","default":800,"title":"Max Tokens","type":"number","buildship":{"sensitive":false,"index":2.4,"defaultExpressionType":"text"},"properties":{}}},"type":"object"},"_libRef":{"version":"1.0.13","isDirty":false,"libType":"public","libNodeRefId":"@buildship/keyless-openai-text-generator","integrity":"v3:77ef7f4600ec6728ac40cc1154bcfc95","src":"https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodesV2/@buildship/keyless-openai-text-generator/1.0.13/build.cjs","buildHash":"cfa2c7912196e91e134ea67a74560ba14453ea08e52a5d03d0fe2c4f9327d4df"},"dependencies":{"fs":"0.0.2","openai":"4.24.7","path":"0.12.7"},"integrations":[]}]},"type":"switch","id":"42dc90ce-937e-4229-b2c4-09b47bb25522"},{"label":"Outputs","description":"","type":"output","id":"7fc9eba5-637a-4e0f-91d9-e82760176ef8"}],"triggers":[{"label":"Tool Trigger","setupPreview":"https://raw.githubusercontent.com/rowyio/tools-instructions/refs/heads/main/buildship-app-js/agent-builder.js","_libRef":{"libType":"public","src":"https://storage.googleapis.com/buildship-library-us-central1/triggers/@buildship/tool-trigger/3.0.1/__verify.cjs","isDirty":false,"version":"3.0.1","libNodeRefId":"@buildship/tool-trigger","integrity":"v3:afcc492c2a5f936362a91c589f3a0532"},"meta":{"payloadLimit":false,"description":"The Tool Trigger creates an API endpoint that your Agent can use to perform specific tasks. When the Agent detects a request that matches the tool’s function, it automatically triggers the API, sends the necessary inputs, and processes the response.","name":"Tool Trigger","fileUploadLimit":false,"hideConnectButton":true,"id":"tool-trigger","icon":{"svg":"<path d=\"M8.37853 3.96432L10.707 6.29275C10.8945 6.48028 10.9999 6.73464 10.9999 6.99986V9.99986C10.9999 10.5521 10.5521 10.9999 9.99986 10.9999H6.99986C6.73464 10.9999 6.48028 10.8945 6.29275 10.707L3.96432 8.37853C3.89111 8.89104 3.89749 9.41483 3.98608 9.93115C4.16092 10.9502 4.64741 11.89 5.37853 12.6212C6.10966 13.3523 7.04948 13.8388 8.06856 14.0136C9.08764 14.1885 10.1359 14.0431 11.0689 13.5975C11.4513 13.4149 11.9073 13.4931 12.207 13.7927L18.207 19.7927C18.4172 20.003 18.7025 20.1212 18.9999 20.1212C19.2972 20.1212 19.5825 20.003 19.7927 19.7927C20.003 19.5825 20.1212 19.2972 20.1212 18.9999C20.1212 18.7025 20.003 18.4172 19.7927 18.207L13.7927 12.207C13.4931 11.9073 13.4149 11.4513 13.5975 11.0689C14.0431 10.1359 14.1885 9.08764 14.0136 8.06856C13.8388 7.04948 13.3523 6.10966 12.6212 5.37853C11.89 4.64741 10.9502 4.16092 9.93115 3.98608C9.41483 3.89749 8.89104 3.89111 8.37853 3.96432ZM6.06889 2.59749C7.37513 1.97364 8.84264 1.77009 10.2694 2.01488C11.6961 2.25966 13.0118 2.94074 14.0354 3.96432C15.059 4.9879 15.74 6.30364 15.9848 7.73035C16.1888 8.91918 16.0815 10.1363 15.6791 11.2649L21.207 16.7927C21.7923 17.3781 22.1212 18.172 22.1212 18.9999C22.1212 19.8277 21.7923 20.6216 21.207 21.207C20.6216 21.7923 19.8277 22.1212 18.9999 22.1212C18.172 22.1212 17.3781 21.7923 16.7927 21.207L11.2649 15.6791C10.1363 16.0815 8.91918 16.1888 7.73035 15.9848C6.30364 15.74 4.9879 15.059 3.96432 14.0354C2.94074 13.0118 2.25966 11.6961 2.01488 10.2694C1.77009 8.84264 1.97364 7.37513 2.59749 6.06889C2.73739 5.77595 3.01079 5.56915 3.33075 5.51426C3.65071 5.45936 3.97741 5.5632 4.20696 5.79275L7.41407 8.99986H8.99986V7.41407L5.79275 4.20696C5.5632 3.97741 5.45936 3.65071 5.51426 3.33075C5.56915 3.01079 5.77595 2.73739 6.06889 2.59749Z\" fill=\"white\" fill-opacity=\"0.6\"/>","type":"SVG"}},"id":"ff888879-16ee-482f-a19f-ab3969f14f82","lifeCycleFunctions":["onExecution"],"defaultValues":{"inputs":"{ _$expression_: 'ctx?.[\"root\"]?.[\"' + props.triggerId + '\"]?.[\"' + (props.method === 'GET' ? 'query' : 'body') + '\"].' + props.inputKey }","apiKey":"Array.from(crypto.getRandomValues(new Uint8Array(32))).map((b) => b.toString(16).padStart(2, '0')).join('')","toolName":"props.wfName","toolDescription":"props.triggerDescription"},"description":"The Tool Trigger creates an API endpoint that your Agent can use to perform specific tasks. When the Agent detects a request that matches the tool’s function, it automatically triggers the API, sends the necessary inputs, and processes the response.","usage":"","config":{"required":["method","path","toolDescription","toolName","apiKey"],"properties":{"toolName":{"title":"Tool Name","default":"","type":"string","properties":{},"buildship":{"defaultExpressionType":"text","index":0,"automaticAutofill":true,"sensitive":false}},"apiKey":{"properties":{},"default":"","buildship":{"defaultExpressionType":"text","sensitive":true,"index":2},"title":"API Key","type":"string"},"toolDescription":{"title":"Tool Description","properties":{},"type":"string","buildship":{"defaultExpressionType":"text","sensitive":false,"index":1,"automaticAutofill":true},"default":""},"respondEarly":{"properties":{},"title":"Respond Early (Execute tool in background and don't wait for result)","type":"string","buildship":{"index":3.2,"sensitive":false,"options":[{"value":"yes","label":"Yes (Agent will not get response data)"},{"value":"no","label":"No"}],"defaultExpressionType":"text"},"description":"","enum":["yes-","no"],"default":"no"}},"sections":{"section_1ac7b8ff_593a_42a6_9f44_7acd46d319c1":{"title":"Advanced Options","type":"section","buildship":{"index":3}}},"structure":[{"depth":0,"parentId":null,"id":"toolName","index":0},{"parentId":null,"index":1,"depth":0,"id":"toolDescription"},{"id":"apiKey","parentId":null,"index":2,"depth":0},{"children":[{"index":0,"parentId":"section_1ac7b8ff_593a_42a6_9f44_7acd46d319c1","depth":1,"id":"respondEarly"}],"parentId":null,"depth":0,"index":3,"id":"section_1ac7b8ff_593a_42a6_9f44_7acd46d319c1"}],"type":"object"},"response":{"type":"object","sections":{},"properties":{"body":{"buildship":{"index":1,"sensitive":false,"defaultExpressionType":"text"},"type":"object","title":"Response Body","properties":{},"description":"Body of the response","default":{"_$keys_":["output"]}},"cacheMaxAge":{"description":"Set cache duration in seconds","properties":{},"title":"Cache Time","type":"number","buildship":{"sensitive":false,"index":2},"default":0},"status":{"description":"The HTTP status code to return","enum":["200","201","202","204","400","401","403","404","429","500"],"title":"Status code","buildship":{"index":0,"options":[{"value":"200","label":"OK (200)"},{"value":"201","label":"Created (201)"},{"label":"Accepted (202)","value":"202"},{"label":"Redirect (301)","value":"301"},{"value":"204","label":"No Content (204)"},{"value":"400","label":"Bad Request (400)"},{"label":"Unauthorized (401)","value":"401"},{"label":"Forbidden (403)","value":"403"},{"value":"404","label":"Not Found (404)"},{"value":"429","label":"Too Many Requests (429)"},{"label":"Internal Server Error (500)","value":"500"}]},"default":"200","type":"string"}},"title":"Response","required":["body"],"structure":[{"parentId":null,"index":1,"id":"body","depth":0},{"depth":0,"parentId":null,"id":"status","index":0},{"depth":0,"parentId":null,"index":2,"id":"cacheMaxAge"}]},"lastDeploymentHash":"2SYZ06/CdVHoyU+uLxYgj2fZdmh81B9mTlLwO0a1nMk=","usagePreview":"","script":"import parser from \"co-body\";\n\nconst onExecution = async ({ apiKey, respondEarly }, { nodeReq, request, req, logging }) => {\n  const apiKeyHeader = req.header.buildship_api_key;\n  const validApiKeys = [apiKey];\n\n  // If we have request.params.toolkitId, it means the /executeTool/:workflowId/:triggerId route was executed\n  if (request.params?.workflowId) {\n    const toolsInToolkit = JSON.parse(process.env.TOOLS_IN_TOOLKIT ?? \"{}\");\n\n    const toolkitIds = Object.entries(toolsInToolkit)\n      .filter(([toolkitId, tools]) => tools.includes(request.params.workflowId))\n      .map(([toolkitId, tools]) => toolkitId);\n    \n    if (toolkitIds.length === 0) {\n      req.throw(400, \"Tool is not part of any toolkit\");\n      return;\n    }\n\n    for (const toolkitId of toolkitIds) {\n      const toolkitKeys = JSON.parse(process.env.TOOLKIT_KEYS ?? \"{}\");\n      const keysForToolkit = toolkitKeys[toolkitId] ?? [];\n      validApiKeys.push(...keysForToolkit);\n    }\n  }\n\n  if (!validApiKeys.includes(apiKeyHeader)) {\n    req.throw(401, \"Invalid API key\");\n    return;\n  }\n\n  if (respondEarly === \"yes\") {\n    req.status = 200;\n    req.body = \"Tool is executing in the background\";\n  }\n\n  const limit = process.env?.PROJECT_PLAN === \"FREE\" ? \"1MB\" : \"32MB\";\n  const body = await parser(nodeReq, { limit });\n  const ret = {\n    query: request.query,\n    headers: request.headers,\n    body: body !== null && body !== void 0 ? body : {},\n    params: request.params,\n    path: request.path,\n  };\n  return ret;\n};\n\nexport default { onExecution };\n","type":"tool-trigger","data":{"properties":{"body":{"properties":{},"title":"Body","buildship":{"sensitive":true,"index":0},"default":{},"type":"object"},"requestPath":{"title":"Request Path","description":"","buildship":{"index":4},"type":"string"},"query":{"type":"object","title":"Query","buildship":{"index":2},"description":"Query parameters of the request"},"params":{"type":"object","description":"Named URL parameters","buildship":{"index":3},"title":"Params","properties":{}},"headers":{"properties":{"x-cloud-trace-context":{"buildship":{"index":1,"sensitive":true},"title":"x-cloud-trace-context","properties":{},"default":"","type":"string"},"authorization":{"buildship":{"index":2},"type":"string","title":"authorization"},"origin":{"type":"string","title":"origin","buildship":{"sensitive":true,"index":0},"default":"","properties":{}}},"default":{},"type":"object","description":"Headers of the request","buildship":{"index":0,"sensitive":true},"title":"Headers"}},"required":["body"],"type":"object","title":"Request","description":"Named URL parameters","buildship":{}},"preSetupPreview":"<div\n  style={{\n    margin: \"22px\",\n    padding: \"24px 42px\",\n    marginTop: \"240px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n  }}\n>\n  <div\n    style={{\n      display: \"flex\",\n      padding: \"8px\",\n      backgroundColor: props.theme.palette.text[50],\n      borderRadius: \"8px\"\n    }}\n  >\n    <SvgIcon color=\"inherit\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M11.5422 4.9999C11.7198 5.3907 12.2749 5.3907 12.4526 4.9999L12.7531 4.33866C12.8032 4.22861 12.8914 4.1404 13.0014 4.09038L13.6627 3.78982C14.0535 3.61218 14.0535 3.05709 13.6627 2.87945L13.0014 2.57889C12.8914 2.52887 12.8032 2.44066 12.7531 2.33061L12.4526 1.66937C12.2749 1.27857 11.7198 1.27857 11.5422 1.66937L11.2417 2.33061C11.1916 2.44066 11.1034 2.52887 10.9934 2.57889L10.3321 2.87945C9.94134 3.05709 9.94133 3.61218 10.3321 3.78982L10.9934 4.09038C11.1034 4.1404 11.1916 4.22861 11.2417 4.33866L11.5422 4.9999ZM12.4526 11.0027C12.2749 10.6119 11.7198 10.6119 11.5422 11.0027L11.2417 11.6639C11.1916 11.774 11.1034 11.8622 10.9934 11.9122L10.3321 12.2128C9.94134 12.3904 9.94133 12.9455 10.3321 13.1232L10.9934 13.4237C11.1034 13.4737 11.1916 13.5619 11.2417 13.672L11.5422 14.3332C11.7198 14.724 12.2749 14.724 12.4526 14.3332L12.7531 13.672C12.8032 13.5619 12.8914 13.4737 13.0014 13.4237L13.6627 13.1232C14.0535 12.9455 14.0535 12.3904 13.6627 12.2128L13.0014 11.9122C12.8914 11.8622 12.8032 11.774 12.7531 11.6639L12.4526 11.0027ZM7.83476 6.41222C7.7247 6.3622 7.6365 6.274 7.58647 6.16394L6.45258 3.66937C6.27494 3.27857 5.71985 3.27857 5.54221 3.66937L4.40832 6.16394C4.35829 6.274 4.27009 6.3622 4.16004 6.41222L1.66547 7.54612C1.27467 7.72375 1.27467 8.27885 1.66547 8.45648L4.16004 9.59038C4.27009 9.6404 4.35829 9.72861 4.40832 9.83866L5.54221 12.3332C5.71985 12.724 6.27494 12.724 6.45258 12.3332L7.58647 9.83866C7.6365 9.72861 7.7247 9.6404 7.83476 9.59038L10.3293 8.45649C10.7201 8.27885 10.7201 7.72375 10.3293 7.54612L7.83476 6.41222ZM6.8283 8.58369C6.71812 8.63373 6.62982 8.72202 6.57979 8.8322L6.45265 9.11215C6.27508 9.50316 5.71971 9.50316 5.54214 9.11215L5.41501 8.8322C5.36497 8.72202 5.27668 8.63373 5.1665 8.58369L4.88654 8.45656C4.49554 8.27899 4.49554 7.72361 4.88654 7.54605L5.1665 7.41891C5.27668 7.36888 5.36497 7.28058 5.41501 7.1704L5.54214 6.89045C5.71971 6.49944 6.27508 6.49944 6.45265 6.89045L6.57979 7.1704C6.62982 7.28058 6.71812 7.36888 6.8283 7.41891L7.10825 7.54605C7.49926 7.72361 7.49926 8.27899 7.10825 8.45656L6.8283 8.58369Z\" fill=\"currentColor\" fill-opacity=\"0.9\"/>\n      </svg>\n    </SvgIcon>\n  </div>\n  <br />\n  <Typography\n    sx={(theme) => ({\n      ...theme.typography.body,\n      color: props.theme.palette.text[400],\n      textAlign: \"center\",\n    })}\n  >\n    Expose your flow to an agent by connecting the Tool Trigger\n  </Typography>\n</div>","dependencies":{"co-body":"6.2.0"}}],"nodeValues":{"ff888879-16ee-482f-a19f-ab3969f14f82":{"inputs.postTypeExLinkedInTwitterInstagram":{"_$expression_":"ctx?.[\"root\"]?.[\"ff888879-16ee-482f-a19f-ab3969f14f82\"]?.[\"body\"].postTypeExLinkedInTwitterInstagram","_$schema_":[]},"config.toolDescription":"This tool analyzes the style and content of blog posts from provided URLs to generate a comprehensive style guide in markdown format. It scrapes the content of each blog post and uses AI to synthesize a style guide that reflects the common elements and writing styles found across the input blogs.","outputs.body":{"_$keys_":["output"]},"outputs.status":{"_$keys_":["state","_$bsStatusCode_"]},"inputs.blogUrLs":{"_$schema_":[],"_$expression_":"ctx?.[\"root\"]?.[\"ff888879-16ee-482f-a19f-ab3969f14f82\"]?.[\"body\"].blogUrLs"},"outputs.cacheMaxAge":{"_$keys_":["state","_$bsCacheMaxAge_"]},"config.toolName":"blogStyleGuideFromExamples","config.respondEarly":"no"},"7fc9eba5-637a-4e0f-91d9-e82760176ef8":{"blogStyleGuide":{"_$schema_":[],"type":"javascript","hasErrors":false,"_$expression_":"// Combine all analyzed blog styles into a single markdown style guide\nconst analysis = ctx?.[\"root\"]?.[\"e3a9e9d1-5f3e-4015-b1ef-5811046f5248\"];\nif (typeof analysis === \"string\") {\n  return `# Blog Style Guide\\n\\n${analysis}`;\n} else if (typeof analysis === \"object\" && analysis !== null) {\n  return `# Blog Style Guide\\n\\n${JSON.stringify(analysis, null, 2)}`;\n} else {\n  return \"# Blog Style Guide\\n\\nNo analysis available.\";\n}"},"_$lastNodeOutput_":{"_$keys_":["42dc90ce-937e-4229-b2c4-09b47bb25522"]}},"6729bd7b-b77f-4303-b0d7-352f640e1860":{"selector":"body","fields":"Plans, Price, Features","url":{"_$keys_":["inputs","blogUrLs"]},"mode":"html","kbIntegrationKey":"openai;;credits","oAuthIntegrations":{}},"b59a23d7-9056-4619-a846-57b915b50c2d":{"kbIntegrationKey":"openai;;credits"},"e6b2878d-cb4d-448b-b40c-6e67385ca292":{"oAuthIntegrations":{},"maxTokens":800,"systemPrompt":"Please create a post for Twitter using hashtags related to content. Character limit is 280.","kbIntegrationKey":"openai;;credits","model":"gpt-4.1-mini","temperature":0.5,"userRequest":{"_$keys_":["inputs","blogUrLs"]}},"9d7cc712-adba-4e62-8c83-291fe48846c9":{"maxTokens":800,"model":"gpt-4.1-mini","kbIntegrationKey":"openai;;credits","oAuthIntegrations":{},"temperature":0.5,"userRequest":{"_$keys_":["inputs","blogUrLs"]},"systemPrompt":"Please create a post for Instagram using hashtags related to content. Character limit is 2200."},"42dc90ce-937e-4229-b2c4-09b47bb25522":{"condition_696a2b0c_ea8e_4ef2_91dd_3a9894d0eaee":{"_$expression_":" ","hasErrors":false,"_$schema_":[],"type":"condition","_$conditions_":[{"firstOperand":{"_$keys_":["inputs","postTypeExLinkedInTwitterInstagram"]},"secondOperand":"Instagram","comparisonOperator":"==="}]},"condition_aebf6043_d203_4c36_b580_a2c781d40f1c":{"_$conditions_":[{"comparisonOperator":"===","secondOperand":"Twitter","firstOperand":{"_$keys_":["inputs","postTypeExLinkedInTwitterInstagram"]}}],"_$schema_":[],"_$expression_":" ","type":"condition","hasErrors":false},"condition_1":{"hasErrors":false,"_$schema_":[],"type":"condition","_$conditions_":[{"secondOperand":"LinkedIn","firstOperand":{"_$keys_":["inputs","postTypeExLinkedInTwitterInstagram"]},"comparisonOperator":"==="}],"_$expression_":" "},"executionType":"all_that_match"},"981f3a0e-d0fc-4c5d-8af4-45b6ba74207e":{"kbIntegrationKey":"openai;;credits"},"97f8173b-0c57-4e6c-92a4-75a626721231":{"model":"gpt-4.1-mini","kbIntegrationKey":"openai;;credits","userRequest":{"_$keys_":["inputs","blogUrLs"]},"oAuthIntegrations":{},"temperature":0.5,"maxTokens":800,"systemPrompt":"Please create a professional post for LinkedIn using hashtags related to content. Don't use informal words. Character limit is 3000."}},"runtimeVersion":"v3","outputs":{"required":[],"properties":{"blogStyleGuide":{"title":"Blog Style Guide","type":"string","description":"Comprehensive blog style guide in markdown format, synthesized from all input blogs.","buildship":{"index":0}}},"type":"object"},"inputs":{"required":["string"],"properties":{"postTypeExLinkedInTwitterInstagram":{"type":"string","buildship":{"index":1},"title":"Post type (Ex: LinkedIn, Twitter, Instagram)"},"blogUrLs":{"description":"Array of blog post URLs to analyze for style guide creation.","type":"string","title":"Blog URLs","buildship":{"defaultExpressionType":"text","sensitive":false,"index":0}}},"type":"object"},"variables":{"_$bsCacheMaxAge_":{"type":"number","buildship":{"index":0},"default":0,"title":"Flow Output Cache Time","properties":{}},"_$bsStatusCode_":{"type":"string","properties":{},"buildship":{"index":0},"title":"Flow Output Status Code"}}}
